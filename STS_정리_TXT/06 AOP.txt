01 AOP
	- 관점 지향 프로그래밍
	- AOP는 여러 개의 핵심 비즈니스 로직 외에 공통으로 처리되어야 하는 로그 출력, 보안 처리, 
	  예외 처리와 같은 코드를 별도로 분리해서 하나의 단위로 묶는 모듈화의 개념으로 생각할 수 있다
	- 핵심적인 관점	: 핵심 비즈니스 로직을 의미
	- 부가적인 관점	: 공통으로 처리되어야 하는 코드를 의미
02 AOP 용어
	- 관점(Aspect)			: 공통적으로 적용될 기능을 의미
	- 어드바이스(Advice)		: 실제로 부가적인 기능을 구현한 객체를 의미
	- 조인 포인트(Join point)	: 어드바이스를 적용할 위치를 의미
	- 포인트컷(Pointcut)		: 어드바이스를 적용할 조인 포인트를 선별하는 과정이나 그 기능을 정의한 모듈을 의미
	- 타겟(Target)			: 실제로 비즈니스 로직을 수행하는 객체를 의미
	- 프록시(Proxy)			: 어드바이스가 적용되었을 때 생성되는 객체를 의미
	- 인트로덕션(Introduction)	: 타겟에는 없는 새로운 메서드나 멤버(인스턴스) 변수를 추가하는 기능
	- 위빙(Weaving)			:포인트컷에 의해서 결정된 타겟의 조인 포인트에 어드바이스를 적용하는 것을 의미
03 사용법
	- 애노테이션 등록
		- @Component	: 스프링 컨테이너에 빈(Bean)으로 등록하기 위한 어노테이션
		- @Aspect	: AOP 기능을 하는 클래스의 클래스 레벨에 선언하는 어노테이션
		- @Around	: 어드바이스(Advice)의 종류 중 한 가지로 어드바이스는 모두 다섯 가지의 타입이 있으면서 어드바이스 중 가장 강력한 기능
	- 다섯개의 어드바이스 
		- Before Advice(@Before)		: Target 메서드 호출 이전에 적용할 어드바이스 정의
		- After Returning(@AfterReturning)	: Target 메서드가 성공적으로 실행되고, 결괏값을 반환한 뒤에 적용
		- After Throwing(@AfterThrowing)	: Target 메서드에서 예외 발생 이후에 적용
		- After(@After)				: Target 메서드에서 예외 발생에 관계없이 적용
		- Around(@Around)			: Target 메서드 호출 이전과 이후 모두 적용