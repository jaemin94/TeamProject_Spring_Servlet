01 기본 예외처리 방법
	- timestamp	: 에러가 발생한 시간
	- status	: 에러의 Http 상태
	- error		: 에러코드
	- path		: 에러가 발생한 URI
	- excption	: 최상위 예외 클래스의 이름
	- message	: 에러에 대한 내용
	- errors	: BindingException에 의해 생긴 에러 목록
	- trace		: 에러 스택 트래이스

02 다양한 예외처리 방법
	- DefaultErrorAttributes			: 에러 속성을 저장하며 직접 예외를 처리하지 않는다
	- ExceptionHandlerExceptionResolver	: 에러 응답을 위한 Controller이나 ControllerAdvice에 있는 ExceptionHandler를 처리
	- ResponseStatusExceptionResolver	: Http 상태코드를 지정하는 @ResponseStatus 또는 ResponseStatusException을 처리
	- DefaultHandlerExceptionResolver	: 스프링 내부의 기본 예외들을 처리

03 스프링의 예외처리 흐름
	- 1. ExceptionHandlerExceptionResolver가 동작
		- 예외가 발생한 컨트롤러 안에 적합한 @ExceptionHandler가 있는지 검사
		- 컨트롤러의 @ExceptionHandler에서 처리가능하다면 처리하고, 그렇지 않으면 ControllerAdvice로 넘어감
		- ControllerAdvice안에 적합한 @ExceptionHandler가 있는지 검사하고 없으면 다음 처리기로 넘어감
	- 2. ResponseStatusExceptionResolver가 동작함
		- @ResponseStatus가 있는지 또는 ResponseStatusException인지 검사
		- 맞으면 ServletResponse의 sendError()로 예외를 서블릿까지 전달되고, 서블릿이 BasicErrorController로 요청을 전달
	- 3. DefaultHandlerExceptionResolver가 동작
		- Spring의 내부 예외인지 검사하여 맞으면 에러를 처리하고 아니면 넘어감
	- 4. 적합한 ExceptionResolver가 없으므로 예외가 서블릿까지 전달되고, 서블릿은 SpringBoot가 진행한 자동 설정에 맞게 BasicErrorController로 요청을 다시 전달